// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  email       String      @db.VarChar(255) @unique
  password    String      @db.VarChar(255)
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?
  locked Boolean @default(false)
  active UserStatus @default(ACTIVE)

  attachments Attachment[]
  expenses Expense[]
  claims Claim[]
  otpRequests UserOTP[]
  auditLogEntries AuditLog[]
  flags               UserFlags?
  @@map("user")
}

model UserFlags {
  id      Int   @id @default(autoincrement())
  HAS_SEEN_WELCOME_PAGE Boolean @default(false)
  WARN_OAUTH_EMAIL_DIFFERENT Boolean @default(false)
  user    User @relation(fields: [userId], references: [id])
  userId  Int @unique

}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Claim {
  id Int @id @default(autoincrement())
  userId Int
  submittedAt DateTime @default(now())
  status Status @default(PENDING)
  expenses Expense[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Decimal @db.Decimal(10, 2) @default(0.00)
  claimOffset Decimal @db.Decimal(10, 2) @default(0.00)
  totalAmountAfterOffset Decimal @db.Decimal(10,2) @default(0.00)
  shareId String @default("00000000-0000-0000-0000-000000000000") @unique

  @@map("claim")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(50)
  icon     String    @db.VarChar(30)
  expenses Expense[]

  @@map("category")
}

model Expense {
  id           Int         @id @default(autoincrement())
  userId       Int
  spentOn      DateTime    @default(now())
  submittedAt  DateTime    @default(now())
  editedAt     DateTime?   @updatedAt
  amount       Decimal    @db.Decimal(10, 2)
  description  String?
  categoryId   Int?
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  claimId Int?
  claimComplete Boolean @default(false)
  attachments  Attachment[]
  claim Claim? @relation(fields: [claimId], references: [id])
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expense")
}

model Attachment {
  id          Int      @id @default(autoincrement())
  uploaderId  Int
  uploader    User?    @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  expenseId   Int
  expense     Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  fileName    String
  fileUrl     String   @db.VarChar(300)
  fileObjectUrl String @db.VarChar(300)
  mimeType    String   @db.VarChar(300)
  fileSize    Int
  createdAt   DateTime @default(now())

  @@map("attachment")
}

enum Status {
  PENDING
  COMPLETED
}

model AuditLog {
  id          Int         @id @default(autoincrement())
  userId      Int?
  user        User?       @relation(fields: [userId], references: [id])
  action      AuditAction
  timestamp   DateTime    @default(now())
  details     Json?
  ipAddress   String?     @db.VarChar(45)
  userAgent   String?     @db.VarChar(255)

  @@map("audit_log")
}

enum AuditAction {
  USER_LOGIN_SUCCESS
  USER_LOGIN_FAILURE
  PASSWORD_CHANGED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  PROFILE_UPDATED
  ACCOUNT_CREATED
  ACCOUNT_DELETED
  ROLE_CHANGED
  PERMISSION_CHANGED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  SESSION_TERMINATED
  CLAIM_SUBMITTED
  CLAIM_UPDATED
  CLAIM_STATUS_CHANGED
  CLAIM_DELETED
  EXPENSE_CREATED
  EXPENSE_UPDATED
  EXPENSE_DELETED
  ATTACHMENT_PRESIGNED_URL_REQUESTED
  ATTACHMENT_UPLOADED
  ATTACHMENT_DELETED
}

model UserOTP {
  id          Int         @id @default(autoincrement())
  email       String      @db.VarChar(50)
  createdAt   DateTime    @default(now())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  requestType String      @db.VarChar(100)
  isUsed      Boolean     @default(false)
  isOverwritten Boolean   @default(false)
  secret      String      @db.VarChar(255) @default("0")
  otp         String      @db.VarChar(6)
  @@map("userotp")
}